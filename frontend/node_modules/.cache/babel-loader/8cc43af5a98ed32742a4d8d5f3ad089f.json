{"ast":null,"code":"var _jsxFileName = \"/Users/leyaozhou/Around/frontend/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport { Tabs, Row, Col, Spin, Radio } from 'antd';\nimport { GEO_OPTIONS, POS_KEY, API_ROOT, AUTH_HEADER, TOKEN_KEY, POST_TYPE_IMAGE, POST_TYPE_VIDEO, POST_TYPE_UNKNOWN, TOPIC_AROUND, TOPIC_FACE } from '../constants';\nimport Gallery from './Gallery';\nimport CreatePostButton from './CreatePostButton';\nimport AroundMap from './AroundMap';\nconst {\n  TabPane\n} = Tabs;\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoadingGeoLocation: false,\n      isLoadingPosts: false,\n      error: '',\n      posts: [],\n      topic: TOPIC_AROUND\n    };\n\n    this.onSuccessLoadGeoLocation = position => {\n      console.log(position);\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      localStorage.setItem(POS_KEY, JSON.stringify({\n        lat: latitude,\n        lon: longitude\n      }));\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: ''\n      });\n      this.loadNearbyPosts();\n    };\n\n    this.onFailedLoadGeoLocaiton = () => {\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: 'Failed to load geolocation.'\n      });\n    };\n\n    this.loadNearbyPosts = (center, radius) => {\n      const {\n        lat,\n        lon\n      } = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\n      const range = radius ? radius : 20;\n      const token = localStorage.getItem(TOKEN_KEY);\n      this.setState({\n        isLoadingPosts: true,\n        error: ''\n      });\n      return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Failed to load post.');\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          posts: data ? data : [],\n          isLoadingPosts: false\n        });\n      }).catch(e => {\n        console.error(e);\n        this.setState({\n          isLoadingPosts: false,\n          error: e.message\n        });\n      });\n    };\n\n    this.handleTopicChange = e => {\n      const topic = e.target.value;\n      console.log(topic);\n      this.setState({\n        topic\n      });\n\n      if (topic === TOPIC_AROUND) {\n        this.loadNearbyPosts();\n      } else {\n        this.loadFacesAroundTheWorld();\n      }\n    };\n\n    this.loadFacesAroundTheWorld = () => {\n      const token = localStorage.getItem(TOKEN_KEY);\n      this.setState({\n        isLoadingPosts: true,\n        error: ''\n      });\n      return fetch(`${API_ROOT}/cluster?term=face`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Failed to load posts');\n      }).then(data => {\n        this.setState({\n          posts: data ? data : [],\n          isLoadingPosts: false\n        });\n      }).catch(e => {\n        console.error(e);\n        this.setState({\n          isLoadingPosts: false,\n          error: e.message\n        });\n      });\n    };\n\n    this.loadPostsByTopic = (center, radius) => {\n      if (this.state.topic === TOPIC_AROUND) {\n        return this.loadNearbyPosts(center, radius);\n      } else {\n        return this.loadFacesAroundTheWorld();\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(navigator.geolocation);\n\n    if (\"geolocation\" in navigator) {\n      this.setState({\n        isLoadingGeoLocation: true,\n        error: ''\n      });\n      navigator.geolocation.getCurrentPosition(this.onSuccessLoadGeoLocation, this.onFailedLoadGeoLocation, GEO_OPTIONS);\n    } else {\n      this.setState({\n        error: 'Geolocation is not supported'\n      });\n    }\n  }\n\n  renderImagePosts() {\n    const {\n      posts\n    } = this.state;\n    const images = posts.filter(post => post.type === POST_TYPE_IMAGE).map(post => {\n      return {\n        user: post.user,\n        src: post.url,\n        thumbnail: post.url,\n        caption: post.message,\n        thumbnailWidth: 400,\n        thumbnailHeight: 300\n      };\n    });\n    return /*#__PURE__*/React.createElement(Gallery, {\n      images: images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 16\n      }\n    });\n  }\n\n  renderVideoPosts() {\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Row, {\n      gutter: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, posts.filter(post => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type)).map(post => /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      key: post.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      src: post.url,\n      controls: true,\n      className: \"video-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, post.user, \": \", post.message))));\n  }\n\n  renderPosts(type) {\n    const {\n      error,\n      isLoadingGeoLocation,\n      isLoadingPosts,\n      posts\n    } = this.state;\n\n    if (error) {\n      return error;\n    } else if (isLoadingGeoLocation) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading geo location...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 20\n        }\n      });\n    } else if (isLoadingPosts) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading posts...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 20\n        }\n      });\n    } else if (posts.length > 0) {\n      return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\n    } else {\n      return 'No nearby posts';\n    }\n  }\n\n  render() {\n    const operations = /*#__PURE__*/React.createElement(CreatePostButton, {\n      loadNearbyPosts: this.loadNearbyPosts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 28\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: this.handleTopicChange,\n      value: this.state.topic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      value: TOPIC_AROUND,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, \"Posts Around Me\"), /*#__PURE__*/React.createElement(Radio, {\n      value: TOPIC_FACE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, \"Faces Around The World\")), /*#__PURE__*/React.createElement(Tabs, {\n      tabBarExtraContent: operations,\n      className: \"main-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Image Posts\",\n      key: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, this.renderPosts(POST_TYPE_IMAGE)), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Video Posts\",\n      key: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, this.renderPosts(POST_TYPE_VIDEO)), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Map\",\n      key: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AroundMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 45\n        }\n      }),\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `600px`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 47\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 41\n        }\n      }),\n      posts: this.state.posts,\n      loadPostsByTopic: this.loadPostsByTopic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/leyaozhou/Around/frontend/src/components/Home.js"],"names":["React","Component","Tabs","Row","Col","Spin","Radio","GEO_OPTIONS","POS_KEY","API_ROOT","AUTH_HEADER","TOKEN_KEY","POST_TYPE_IMAGE","POST_TYPE_VIDEO","POST_TYPE_UNKNOWN","TOPIC_AROUND","TOPIC_FACE","Gallery","CreatePostButton","AroundMap","TabPane","Home","state","isLoadingGeoLocation","isLoadingPosts","error","posts","topic","onSuccessLoadGeoLocation","position","console","log","latitude","longitude","coords","localStorage","setItem","JSON","stringify","lat","lon","setState","loadNearbyPosts","onFailedLoadGeoLocaiton","center","radius","parse","getItem","range","token","fetch","method","headers","Authorization","then","response","ok","json","Error","data","catch","e","message","handleTopicChange","target","value","loadFacesAroundTheWorld","loadPostsByTopic","componentDidMount","navigator","geolocation","getCurrentPosition","onFailedLoadGeoLocation","renderImagePosts","images","filter","post","type","map","user","src","url","thumbnail","caption","thumbnailWidth","thumbnailHeight","renderVideoPosts","includes","renderPosts","length","render","operations","height"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA0C,MAA1C;AACA,SACIC,WADJ,EAEIC,OAFJ,EAGIC,QAHJ,EAIIC,WAJJ,EAKIC,SALJ,EAMIC,eANJ,EAOIC,eAPJ,EAQIC,iBARJ,EASIC,YATJ,EAUIC,UAVJ,QAWO,cAXP;AAaA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAYlB,IAAlB;;AAEA,MAAMmB,IAAN,SAAmBpB,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBqB,KADyB,GACjB;AACJC,MAAAA,oBAAoB,EAAE,KADlB;AAEJC,MAAAA,cAAc,EAAE,KAFZ;AAGJC,MAAAA,KAAK,EAAE,EAHH;AAIJC,MAAAA,KAAK,EAAE,EAJH;AAKJC,MAAAA,KAAK,EAAEZ;AALH,KADiB;;AAAA,SAuBzBa,wBAvByB,GAuBGC,QAAD,IAAc;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,YAAM;AAACG,QAAAA,QAAD;AAAWC,QAAAA;AAAX,UAAwBJ,QAAQ,CAACK,MAAvC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB5B,OAArB,EAA8B6B,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,GAAG,EAAEP,QAAN;AAAgBQ,QAAAA,GAAG,EAAEP;AAArB,OAAf,CAA9B;AACA,WAAKQ,QAAL,CAAc;AAAClB,QAAAA,oBAAoB,EAAE,KAAvB;AAA8BE,QAAAA,KAAK,EAAC;AAApC,OAAd;AACA,WAAKiB,eAAL;AACH,KA7BwB;;AAAA,SA+BzBC,uBA/ByB,GA+BC,MAAM;AAC5B,WAAKF,QAAL,CAAc;AAAClB,QAAAA,oBAAoB,EAAE,KAAvB;AAA8BE,QAAAA,KAAK,EAAE;AAArC,OAAd;AACH,KAjCwB;;AAAA,SAmCzBiB,eAnCyB,GAmCP,CAACE,MAAD,EAASC,MAAT,KAAoB;AAClC,YAAM;AAACN,QAAAA,GAAD;AAAMC,QAAAA;AAAN,UAAaI,MAAM,GAAGA,MAAH,GAAYP,IAAI,CAACS,KAAL,CAAWX,YAAY,CAACY,OAAb,CAAqBvC,OAArB,CAAX,CAArC;AACA,YAAMwC,KAAK,GAAGH,MAAM,GAAGA,MAAH,GAAY,EAAhC;AACA,YAAMI,KAAK,GAAGd,YAAY,CAACY,OAAb,CAAqBpC,SAArB,CAAd;AACA,WAAK8B,QAAL,CAAc;AAACjB,QAAAA,cAAc,EAAE,IAAjB;AAAuBC,QAAAA,KAAK,EAAE;AAA9B,OAAd;AACA,aAAOyB,KAAK,CAAE,GAAEzC,QAAS,eAAc8B,GAAI,QAAOC,GAAI,UAASQ,KAAM,EAAzD,EAA4D;AACpEG,QAAAA,MAAM,EAAE,KAD4D;AAEpEC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAG,GAAE3C,WAAY,IAAGuC,KAAM;AADlC;AAF2D,OAA5D,CAAL,CAKJK,IALI,CAKEC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACb,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;;AACD,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH,OAVM,EAUJJ,IAVI,CAUEK,IAAD,IAAU;AACd7B,QAAAA,OAAO,CAACC,GAAR,CAAY4B,IAAZ;AACA,aAAKlB,QAAL,CAAc;AAACf,UAAAA,KAAK,EAAEiC,IAAI,GAAGA,IAAH,GAAS,EAArB;AAAyBnC,UAAAA,cAAc,EAAE;AAAzC,SAAd;AACH,OAbM,EAaJoC,KAbI,CAaGC,CAAD,IAAO;AACZ/B,QAAAA,OAAO,CAACL,KAAR,CAAcoC,CAAd;AACA,aAAKpB,QAAL,CAAc;AAACjB,UAAAA,cAAc,EAAE,KAAjB;AAAwBC,UAAAA,KAAK,EAAEoC,CAAC,CAACC;AAAjC,SAAd;AACH,OAhBM,CAAP;AAiBH,KAzDwB;;AAAA,SA6GzBC,iBA7GyB,GA6GJF,CAAD,IAAO;AACvB,YAAMlC,KAAK,GAAGkC,CAAC,CAACG,MAAF,CAASC,KAAvB;AACAnC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAKc,QAAL,CAAc;AAACd,QAAAA;AAAD,OAAd;;AACA,UAAIA,KAAK,KAAKZ,YAAd,EAA4B;AACxB,aAAK2B,eAAL;AACH,OAFD,MAEO;AACH,aAAKwB,uBAAL;AACH;AACJ,KAtHwB;;AAAA,SAwHzBA,uBAxHyB,GAwHC,MAAM;AAC5B,YAAMjB,KAAK,GAAGd,YAAY,CAACY,OAAb,CAAqBpC,SAArB,CAAd;AACA,WAAK8B,QAAL,CAAc;AAACjB,QAAAA,cAAc,EAAE,IAAjB;AAAuBC,QAAAA,KAAK,EAAC;AAA7B,OAAd;AACA,aAAOyB,KAAK,CAAE,GAAEzC,QAAS,oBAAb,EAAkC;AAC1C0C,QAAAA,MAAM,EAAE,KADkC;AAE1CC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAG,GAAE3C,WAAY,IAAGuC,KAAM;AADlC;AAFiC,OAAlC,CAAL,CAKJK,IALI,CAKEC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACb,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACH;;AACD,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH,OAVM,EAUJJ,IAVI,CAUEK,IAAD,IAAU;AACd,aAAKlB,QAAL,CAAc;AAACf,UAAAA,KAAK,EAAEiC,IAAI,GAAGA,IAAH,GAAU,EAAtB;AAA0BnC,UAAAA,cAAc,EAAE;AAA1C,SAAd;AACH,OAZM,EAYJoC,KAZI,CAYGC,CAAD,IAAO;AACZ/B,QAAAA,OAAO,CAACL,KAAR,CAAcoC,CAAd;AACA,aAAKpB,QAAL,CAAc;AAACjB,UAAAA,cAAc,EAAE,KAAjB;AAAwBC,UAAAA,KAAK,EAAEoC,CAAC,CAACC;AAAjC,SAAd;AACH,OAfM,CAAP;AAgBH,KA3IwB;;AAAA,SA6IzBK,gBA7IyB,GA6IN,CAACvB,MAAD,EAASC,MAAT,KAAoB;AACnC,UAAI,KAAKvB,KAAL,CAAWK,KAAX,KAAqBZ,YAAzB,EAAuC;AACnC,eAAO,KAAK2B,eAAL,CAAqBE,MAArB,EAA6BC,MAA7B,CAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAKqB,uBAAL,EAAP;AACH;AACJ,KAnJwB;AAAA;;AASzBE,EAAAA,iBAAiB,GAAG;AAChBtC,IAAAA,OAAO,CAACC,GAAR,CAAYsC,SAAS,CAACC,WAAtB;;AACA,QAAI,iBAAiBD,SAArB,EAAgC;AAC5B,WAAK5B,QAAL,CAAc;AAAClB,QAAAA,oBAAoB,EAAE,IAAvB;AAA6BE,QAAAA,KAAK,EAAE;AAApC,OAAd;AACA4C,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACI,KAAK3C,wBADT,EAEI,KAAK4C,uBAFT,EAGIjE,WAHJ;AAKH,KAPD,MAOO;AACH,WAAKkC,QAAL,CAAc;AAAChB,QAAAA,KAAK,EAAE;AAAR,OAAd;AACH;AACJ;;AAsCDgD,EAAAA,gBAAgB,GAAG;AACf,UAAM;AAAC/C,MAAAA;AAAD,QAAU,KAAKJ,KAArB;AACA,UAAMoD,MAAM,GAAGhD,KAAK,CACfiD,MADU,CACFC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcjE,eADrB,EAEVkE,GAFU,CAELF,IAAD,IAAU;AACX,aAAO;AACHG,QAAAA,IAAI,EAAEH,IAAI,CAACG,IADR;AAEHC,QAAAA,GAAG,EAAEJ,IAAI,CAACK,GAFP;AAGHC,QAAAA,SAAS,EAAEN,IAAI,CAACK,GAHb;AAIHE,QAAAA,OAAO,EAAEP,IAAI,CAACd,OAJX;AAKHsB,QAAAA,cAAc,EAAE,GALb;AAMHC,QAAAA,eAAe,EAAE;AANd,OAAP;AAQH,KAXU,CAAf;AAYA,wBAAO,oBAAC,OAAD;AAAS,MAAA,MAAM,EAAEX,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAEDY,EAAAA,gBAAgB,GAAG;AACf,UAAM;AAAC5D,MAAAA;AAAD,QAAU,KAAKJ,KAArB;AACA,wBACI,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQI,KAAK,CACAiD,MADL,CACaC,IAAD,IAAU,CAAC/D,eAAD,EAAkBC,iBAAlB,EAAqCyE,QAArC,CAA8CX,IAAI,CAACC,IAAnD,CADtB,EAEKC,GAFL,CAEUF,IAAD,iBACD,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAc,MAAA,GAAG,EAAEA,IAAI,CAACK,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAEL,IAAI,CAACK,GAAjB;AAAsB,MAAA,QAAQ,EAAE,IAAhC;AAAsC,MAAA,SAAS,EAAC,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIL,IAAI,CAACG,IAAT,QAAiBH,IAAI,CAACd,OAAtB,CAFJ,CAHR,CAFR,CADJ;AAcH;;AAED0B,EAAAA,WAAW,CAACX,IAAD,EAAO;AACd,UAAM;AAACpD,MAAAA,KAAD;AAAQF,MAAAA,oBAAR;AAA8BC,MAAAA,cAA9B;AAA8CE,MAAAA;AAA9C,QAAuD,KAAKJ,KAAlE;;AACA,QAAIG,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH,KAFD,MAEO,IAAIF,oBAAJ,EAA0B;AAC7B,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,yBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,MAEA,IAAIC,cAAJ,EAAoB;AACvB,0BAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,MAEA,IAAIE,KAAK,CAAC+D,MAAN,GAAe,CAAnB,EAAsB;AACzB,aAAOZ,IAAI,KAAKjE,eAAT,GAA2B,KAAK6D,gBAAL,EAA3B,GAAqD,KAAKa,gBAAL,EAA5D;AACH,KAFM,MAEA;AACH,aAAO,iBAAP;AACH;AACJ;;AA0CDI,EAAAA,MAAM,GAAG;AACL,UAAMC,UAAU,gBAAG,oBAAC,gBAAD;AAAkB,MAAA,eAAe,EAAE,KAAKjD,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnB;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,QAAQ,EAAE,KAAKqB,iBAA5B;AAA+C,MAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWK,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEZ,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFJ,CADJ,eAKI,oBAAC,IAAD;AAAM,MAAA,kBAAkB,EAAE2E,UAA1B;AAAsC,MAAA,SAAS,EAAC,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAC,aAAb;AAA2B,MAAA,GAAG,EAAC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,WAAL,CAAiB5E,eAAjB,CADL,CADJ,eAII,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAC,aAAb;AAA2B,MAAA,GAAG,EAAC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK4E,WAAL,CAAiB3E,eAAjB,CADL,CAJJ,eAOI,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAC,KAAb;AAAmB,MAAA,GAAG,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,YAAY,EAAC,+HADjB;AAEI,MAAA,cAAc,eAAE;AAAK,QAAA,KAAK,EAAE;AAAC+E,UAAAA,MAAM,EAAG;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFpB;AAGI,MAAA,gBAAgB,eAAE;AAAK,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAG;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHtB;AAII,MAAA,UAAU,eAAE;AAAK,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAG;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJhB;AAKI,MAAA,KAAK,EAAE,KAAKtE,KAAL,CAAWI,KALtB;AAMI,MAAA,gBAAgB,EAAE,KAAKyC,gBAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAPJ,CALJ,CADJ;AA0BH;;AAjLwB;;AAoL7B,eAAe9C,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Tabs, Row, Col, Spin, Radio} from 'antd';\nimport {\n    GEO_OPTIONS, \n    POS_KEY, \n    API_ROOT, \n    AUTH_HEADER, \n    TOKEN_KEY, \n    POST_TYPE_IMAGE, \n    POST_TYPE_VIDEO, \n    POST_TYPE_UNKNOWN,\n    TOPIC_AROUND,\n    TOPIC_FACE\n} from '../constants';\n\nimport Gallery from './Gallery';\nimport CreatePostButton from './CreatePostButton';\nimport AroundMap from './AroundMap';\n\nconst {TabPane} = Tabs;\n\nclass Home extends Component {\n    state = {\n        isLoadingGeoLocation: false,\n        isLoadingPosts: false,\n        error: '',\n        posts: [],\n        topic: TOPIC_AROUND\n    }\n\n    componentDidMount() {\n        console.log(navigator.geolocation);\n        if (\"geolocation\" in navigator) {\n            this.setState({isLoadingGeoLocation: true, error: ''});\n            navigator.geolocation.getCurrentPosition(\n                this.onSuccessLoadGeoLocation,\n                this.onFailedLoadGeoLocation,\n                GEO_OPTIONS,\n            );\n        } else {\n            this.setState({error: 'Geolocation is not supported'});\n        }\n    }\n\n    onSuccessLoadGeoLocation = (position) => {\n        console.log(position);\n        const {latitude, longitude} = position.coords;\n        localStorage.setItem(POS_KEY, JSON.stringify({lat: latitude, lon: longitude}));\n        this.setState({isLoadingGeoLocation: false, error:''});\n        this.loadNearbyPosts();\n    }\n\n    onFailedLoadGeoLocaiton = () => {\n        this.setState({isLoadingGeoLocation: false, error: 'Failed to load geolocation.'});\n    }\n\n    loadNearbyPosts = (center, radius) => {\n        const {lat, lon} = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\n        const range = radius ? radius : 20;\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({isLoadingPosts: true, error: ''});\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`\n            }\n        }).then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error('Failed to load post.');\n        }).then((data) => {\n            console.log(data);\n            this.setState({posts: data ? data: [], isLoadingPosts: false});\n        }).catch((e) => {\n            console.error(e);\n            this.setState({isLoadingPosts: false, error: e.message});\n        });\n    }\n\n    renderImagePosts() {\n        const {posts} = this.state;\n        const images = posts\n            .filter((post) => post.type === POST_TYPE_IMAGE)\n            .map((post) => {\n                return {\n                    user: post.user,\n                    src: post.url,\n                    thumbnail: post.url,\n                    caption: post.message,\n                    thumbnailWidth: 400,\n                    thumbnailHeight: 300,\n                };\n            });\n        return <Gallery images={images} />\n    }\n\n    renderVideoPosts() {\n        const {posts} = this.state;\n        return (\n            <Row gutter={30}>\n                {\n                    posts\n                        .filter((post) => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type))\n                        .map((post) => (\n                            <Col span={6} key={post.url}>\n                                <video src={post.url} controls={true} className=\"video-block\"/>\n                                <p>{post.user}: {post.message}</p>\n                            </Col>\n                        ))\n                }\n            </Row>\n        );\n    }\n\n    renderPosts(type) {\n        const {error, isLoadingGeoLocation, isLoadingPosts, posts} = this.state;\n        if (error) {\n            return error;\n        } else if (isLoadingGeoLocation) {\n            return <Spin tip=\"Loading geo location...\" />\n        } else if (isLoadingPosts) {\n            return <Spin tip=\"Loading posts...\" />\n        } else if (posts.length > 0) {\n            return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\n        } else {\n            return 'No nearby posts';\n        }\n    }\n\n    handleTopicChange = (e) => {\n        const topic = e.target.value;\n        console.log(topic);\n        this.setState({topic});\n        if (topic === TOPIC_AROUND) {\n            this.loadNearbyPosts();\n        } else {\n            this.loadFacesAroundTheWorld();\n        }\n    }\n\n    loadFacesAroundTheWorld = () => {\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({isLoadingPosts: true, error:''});\n        return fetch(`${API_ROOT}/cluster?term=face`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`,\n            }\n        }).then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error('Failed to load posts');\n        }).then((data) => {\n            this.setState({posts: data ? data : [], isLoadingPosts: false});\n        }).catch((e) => {\n            console.error(e);\n            this.setState({isLoadingPosts: false, error: e.message});\n        });\n    }\n\n    loadPostsByTopic = (center, radius) => {\n        if (this.state.topic === TOPIC_AROUND) {\n            return this.loadNearbyPosts(center, radius);\n        } else {\n            return this.loadFacesAroundTheWorld();\n        }\n    }\n\n    render() {\n        const operations = <CreatePostButton loadNearbyPosts={this.loadNearbyPosts} />;\n        return (\n            <div>\n                <Radio.Group onChange={this.handleTopicChange} value={this.state.topic}>\n                    <Radio value={TOPIC_AROUND}>Posts Around Me</Radio>\n                    <Radio value={TOPIC_FACE}>Faces Around The World</Radio>\n                </Radio.Group>\n                <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\n                    <TabPane tab=\"Image Posts\" key=\"1\">\n                        {this.renderPosts(POST_TYPE_IMAGE)}\n                    </TabPane>\n                    <TabPane tab=\"Video Posts\" key=\"2\">\n                        {this.renderPosts(POST_TYPE_VIDEO)}\n                    </TabPane>\n                    <TabPane tab=\"Map\" key=\"3\">\n                        <AroundMap\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\"\n                            loadingElement={<div style={{height: `100%`}} />}\n                            containerElement={<div style={{height: `600px`}}/>}\n                            mapElement={<div style={{height: `100%`}}/>}\n                            posts={this.state.posts}\n                            loadPostsByTopic={this.loadPostsByTopic}/>\n                    </TabPane>\n                </Tabs>\n            </div>\n            \n        );\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}